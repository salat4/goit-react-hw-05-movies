{"version":3,"file":"static/js/247.2a7f0c78.chunk.js","mappings":"0OA2CA,UAtCa,WACT,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAaC,EAAAA,EAAAA,MAAbD,SACAE,GAAUC,EAAAA,EAAAA,UAalB,OAZEC,EAAAA,EAAAA,YAAU,WAAI,wCACV,oGACwBC,EAAAA,GAAcL,GADtC,OACUM,EADV,OAEIP,EAAQO,GAFZ,4CADU,sBAKNJ,EAAQK,QALD,WAAD,wBASVC,GAHIN,EAAQK,SAAU,IAKxB,CAACP,KAED,yBACCF,IACK,wBACCA,EAAKA,KAAKW,KAAI,SAACC,GAAD,OACX,0BAC4B,OAAxBA,EAAOC,cACP,gBAAKC,IAAKC,EAAOC,IAAM,GAAGC,MAAM,SAChC,gBAAKH,IAAG,wCAAqCF,EAAOC,cAAgBG,IAAM,GAAGC,MAAM,SAGnF,uBAAIL,EAAOM,QACX,wCAAgBN,EAAOO,eAPhBP,EAAOQ,a,0MCvBlCC,IAAAA,SAAAA,QAAyB,+BAIlB,IAAMC,EAAU,mCAAG,6GAEKD,IAAAA,IAAU,gEAFf,cAEZE,EAFY,yBAGXA,EAASC,MAHE,gCAKlBC,QAAQC,MAAR,MALkB,yDAAH,qDAUVC,EAAY,mCAAG,WAAMzB,GAAN,gGAEGmB,IAAAA,IAAA,iBAAoBnB,EAApB,4DAAuFA,GAF1F,cAEdqB,EAFc,yBAGbA,EAASC,MAHI,gCAKpBC,QAAQC,MAAR,MALoB,yDAAH,sDAQZhB,EAAS,mCAAG,WAAMR,GAAN,gGAEMmB,IAAAA,IAAA,iBAAoBnB,EAApB,oEAA+FA,GAFrG,cAEXqB,EAFW,yBAGVA,EAASC,MAHC,gCAKjBC,QAAQC,MAAR,MALiB,yDAAH,sDAQTE,EAAY,mCAAG,WAAM1B,GAAN,gGAEGmB,IAAAA,IAAA,iBAAoBnB,EAApB,oEAA+FA,GAFlG,cAEdqB,EAFc,yBAGbA,EAASC,MAHI,gCAKpBC,QAAQC,MAAR,MALoB,yDAAH,sDAQZG,EAAW,mCAAG,WAAMC,GAAN,gGAEIT,IAAAA,IAAA,sFAAyFS,EAAzF,+BAA4HA,GAFhI,cAEbP,EAFa,yBAGZA,EAASC,MAHG,gCAKnBC,QAAQC,MAAR,MALmB,yDAAH,uD","sources":["components/Cast/Cast.jsx","services/FetchData.jsx"],"sourcesContent":["import * as API from \"services/FetchData\";\nimport { useParams} from \"react-router-dom\";\nimport { useEffect,useState,useRef } from \"react\";\nimport image from \"../../image/broken-1.png\"\n\nconst Cast = () =>{\n    const [cast, setCast] = useState(null)\n    let { movie_id } = useParams();\n    const mounted = useRef();\n    useEffect(()=>{\n        async function FetchCast(){\n            const movie = await API.FetchCast(movie_id)\n            setCast(movie)\n        }\n        if(!mounted.current){\n            mounted.current = true\n              }\n              else {\n        FetchCast()\n    }\n    },[movie_id])\n  return ( \n      <div>\n      {cast &&(\n            <ul>\n            {cast.cast.map((person)=>(\n                <li key = {person.id}>{\n                    person.profile_path === null ?      \n                    <img src={image} alt = \"\" width=\"200\"></img>  :\n                    <img src = {`https:image.tmdb.org/t/p/w500/${person.profile_path}`} alt = \"\" width=\"200\"/>\n\n                }\n                    <p>{person.name}</p>\n                    <p>Character : {person.character}</p>\n                </li>\n            ))}\n        </ul>\n          )\n      }\n      </div>\n     \n  )\n}\nexport default Cast","import axios from \"axios\";\n// import React, {useState, useEffect} from \"react\"\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\"\n\n\n\nexport const FetchTrend = async() =>{\n    try {\n        const response = await axios.get('/trending/movie/day?api_key=515070e14c853494df330daa7406d141');\n        return response.data;\n    } catch (error) {\n        console.error(error);\n      }\n}\n    \n\nexport const FetchDetails = async(movie_id) =>{\n    try {\n        const response = await axios.get(`/movie/${movie_id}?api_key=515070e14c853494df330daa7406d141&language=en-US`,movie_id);\n        return response.data;\n    } catch (error) {\n        console.error(error);\n      }\n}\nexport const FetchCast = async(movie_id) =>{\n    try {\n        const response = await axios.get(`/movie/${movie_id}/credits?api_key=515070e14c853494df330daa7406d141&language=en-US`,movie_id);\n        return response.data;\n    } catch (error) {\n        console.error(error);\n      }\n}\nexport const FetchRewiews = async(movie_id) =>{\n    try {\n        const response = await axios.get(`/movie/${movie_id}/reviews?api_key=515070e14c853494df330daa7406d141&language=en-US`,movie_id);\n        return response.data;\n    } catch (error) {\n        console.error(error);\n      }\n}\nexport const FetchSearch = async(query) =>{\n    try {\n        const response = await axios.get(`/search/movie?api_key=515070e14c853494df330daa7406d141&language=en-US&query=${query}&page=1&include_adult=false`,query);\n        return response.data;\n    } catch (error) {\n        console.error(error);\n      }\n}\n"],"names":["useState","cast","setCast","movie_id","useParams","mounted","useRef","useEffect","API","movie","current","FetchCast","map","person","profile_path","src","image","alt","width","name","character","id","axios","FetchTrend","response","data","console","error","FetchDetails","FetchRewiews","FetchSearch","query"],"sourceRoot":""}